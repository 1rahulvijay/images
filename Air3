# plugins/robust_operators.py
import os
import logging
import time
import datetime
from airflow.models import BaseOperator
from airflow.utils.decorators import apply_defaults
from airflow.exceptions import AirflowFailException
from airflow.utils.email import send_email
from airflow.operators.python import PythonOperator as AirflowPythonOperator
import papermill as pm


class RobustPapermillOperator(BaseOperator):
    """
    Execute Jupyter notebooks with Papermill, with:
      - retries and exponential backoff
      - kernel selection
      - XCom push
      - custom success/failure emails
    """

    @apply_defaults
    def __init__(
        self,
        input_path: str,
        output_path: str,
        parameters: dict = None,
        kernel_name: str = None,
        retries: int = 3,
        backoff: float = 2.0,
        email: list[str] = None,
        custom_message: str = "",
        *args,
        **kwargs
    ):
        super().__init__(*args, **kwargs)
        self.input_path = input_path
        self.output_path = output_path
        self.parameters = parameters or {}
        self.kernel_name = kernel_name
        self.retries = retries
        self.backoff = backoff
        self.email = email
        self.custom_message = custom_message

    def _send_email(self, subject: str, html_content: str):
        if self.email:
            try:
                send_email(to=self.email, subject=subject, html_content=html_content)
                logging.info("Custom email sent successfully")
            except Exception as e:
                logging.warning(f"Failed to send email: {e}")

    def execute(self, context):
        start_time = datetime.datetime.now()
        task_id = context['task_instance'].task_id

        if not os.path.exists(self.input_path):
            raise AirflowFailException(f"Input notebook does not exist: {self.input_path}")

        attempt = 0
        while attempt < self.retries:
            try:
                logging.info(f"Executing notebook: {self.input_path} with kernel: {self.kernel_name}")
                pm.execute_notebook(
                    input_path=self.input_path,
                    output_path=self.output_path,
                    parameters=self.parameters,
                    kernel_name=self.kernel_name,
                    log_output=True
                )

                end_time = datetime.datetime.now()
                duration = (end_time - start_time).total_seconds()

                logging.info(f"Notebook executed successfully: {self.output_path}")

                # Send success email
                subject = f"[Airflow] Task Success: {task_id}"
                html_content = f"""
                <p>Task <b>{task_id}</b> executed successfully.</p>
                <p>Execution time: {duration:.2f} seconds</p>
                <p>Output notebook: {self.output_path}</p>
                <p>{self.custom_message}</p>
                """
                self._send_email(subject, html_content)

                # Push output path to XCom
                return self.output_path

            except Exception as e:
                attempt += 1
                logging.warning(f"Attempt {attempt} failed: {e}")

                if attempt >= self.retries:
                    end_time = datetime.datetime.now()
                    duration = (end_time - start_time).total_seconds()

                    # Send failure email
                    subject = f"[Airflow] Task Failed: {task_id}"
                    html_content = f"""
                    <p>Task <b>{task_id}</b> failed after {self.retries} attempts.</p>
                    <p>Execution time: {duration:.2f} seconds</p>
                    <p>Error: {e}</p>
                    <p>{self.custom_message}</p>
                    """
                    self._send_email(subject, html_content)

                    raise AirflowFailException(f"Notebook execution failed after {self.retries} attempts")

                time.sleep(self.backoff ** attempt)


class RobustPythonOperator(AirflowPythonOperator):
    """
    Enhanced PythonOperator with:
      - custom email notifications
      - retries with backoff
      - XCom push
      - optional custom message
    """

    @apply_defaults
    def __init__(
        self,
        python_callable,
        email: list[str] = None,
        custom_message: str = "",
        retries: int = 3,
        backoff: float = 2.0,
        *args,
        **kwargs
    ):
        super().__init__(
            python_callable=python_callable,
            retries=retries,
            *args,
            **kwargs
        )
        self.email = email
        self.custom_message = custom_message
        self.backoff = backoff

    def _send_email(self, subject: str, html_content: str):
        if self.email:
            try:
                send_email(to=self.email, subject=subject, html_content=html_content)
                logging.info("Custom email sent successfully")
            except Exception as e:
                logging.warning(f"Failed to send email: {e}")

    def execute(self, context):
        task_id = context['task_instance'].task_id
        start_time = datetime.datetime.now()
        attempt = 0

        while attempt < (self.retries or 1):
            try:
                result = super().execute(context)
                end_time = datetime.datetime.now()
                duration = (end_time - start_time).total_seconds()

                # Success email
                subject = f"[Airflow] Task Success: {task_id}"
                html_content = f"""
                <p>Task <b>{task_id}</b> executed successfully.</p>
                <p>Execution time: {duration:.2f} seconds</p>
                <p>{self.custom_message}</p>
                """
                self._send_email(subject, html_content)

                return result

            except Exception as e:
                attempt += 1
                logging.warning(f"Attempt {attempt} failed: {e}")

                if attempt >= (self.retries or 1):
                    end_time = datetime.datetime.now()
                    duration = (end_time - start_time).total_seconds()

                    # Failure email
                    subject = f"[Airflow] Task Failed: {task_id}"
                    html_content = f"""
                    <p>Task <b>{task_id}</b> failed after {self.retries} attempts.</p>
                    <p>Execution time: {duration:.2f} seconds</p>
                    <p>Error: {e}</p>
                    <p>{self.custom_message}</p>
                    """
                    self._send_email(subject, html_content)
                    raise
                time.sleep(self.backoff ** attempt)


from airflow import DAG
from airflow.utils.dates import days_ago
from plugins.robust_operators import RobustPapermillOperator, RobustPythonOperator

def my_python_task():
    return "Hello from Python task"

with DAG(dag_id="robust_demo_dag", start_date=days_ago(1), schedule_interval="@daily", catchup=False) as dag:

    run_notebook = RobustPapermillOperator(
        task_id="execute_notebook",
        input_path="/path/to/input.ipynb",
        output_path="/path/to/output.ipynb",
        kernel_name="python3",
        parameters={"param": 123},
        email=["you@example.com"],
        custom_message="Notebook executed by Airflow DAG"
    )

    run_python = RobustPythonOperator(
        task_id="run_python_task",
        python_callable=my_python_task,
        email=["you@example.com"],
        custom_message="Python task executed successfully"
    )

    run_notebook >> run_python
